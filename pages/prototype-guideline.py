import streamlit as st
import time
import datetime

# Set Streamlit app theme
st.set_page_config(page_title="Guideline",
                   page_icon="images/launchpad-icon.png", layout="centered")

# Display logo image
launchpad_icon = "images/launchpad-icon.png"
st.image(launchpad_icon, width=100)

# Set up app title
st.title("Guidelines and Standards")

# Display disclaimer message
st.write('This page offers concise and practical tips to enhance the effective utilization of various commonly used Streamlit components.')

st.divider()

# Input widget section start
st.markdown("""#### Input Widgets""")

# Text Input
with st.expander("üí¨ **TEXT INPUT**", expanded=False):

    st.text_input("Text input", help="""https://docs.streamlit.io/library/api-reference/widgets/st.text_input""",
                  placeholder="e.g. provide a clear and concise labels or examples to the user")
    st.divider()
    st.caption(
        """
            \n‚Ä¢ Provide clear and concise labels for text input field.
            \n‚Ä¢ Use consistent placeholder text to indicate the expected input format.
            \n‚Ä¢ Use "e.g. example" when providing examples using the placeholder text.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Use text input only if your expected input no longer than 1 line.""")

# Text Area
with st.expander("üìù **TEXT AREA**", expanded=False):

    st.text_area("Text area", help="""Provide a simple tooltip explanation to help user.""",
                 placeholder="e.g. provide a clear and concise labels or examples to the user", max_chars=1000)
    st.divider()
    st.caption(
        """‚Ä¢ Provide clear and concise labels for text area field.
            \n‚Ä¢ Use consistent placeholder text to indicate the expected input format.
            \n‚Ä¢ Use "e.g. example" when providing examples using the placeholder text.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Provide a reasonable height for the text area to accommodate the expected input.
            \n‚Ä¢ Consider limiting the maximum character count if applicable.""")

# Selectbox
with st.expander("‚è¨ **SELECTBOX**", expanded=False):

    st.selectbox(
        'Selectbox',
        ('Option 1', 'Option 2', 'Option 3'), help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Use meaningful and descriptive option labels for the selectbox.
            \n‚Ä¢ Keep the list of options concise and relevant to the context of the application.
            \n‚Ä¢ Ensure that the selectbox has default or pre-selected values that make sense in the context of the application, if applicable.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Make sure the selectbox is wide enough to display the options without truncation or overflow.
            \n‚Ä¢ If applicable, provide a "None" or "Not Applicable" option to account for scenarios where no specific option is suitable.""")

# MultiSelect
with st.expander("üåê **MULTISELECT**", expanded=False):

    st.multiselect(
        'Multiselect',
        ['Option 1', 'Option 2', 'Option 3', 'Option 4'],
        ['Option 1', 'Option 2'], help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose of the multiselect to indicate that multiple options can be selected.
            \n‚Ä¢ Keep the list of options concise and relevant to the context of the application.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Ensure that the multiselect has default or pre-selected values that make sense in the context of the application, if applicable.
            \n‚Ä¢ If applicable, provide a "None" or "Not Applicable" option to account for scenarios where no specific option is suitable.""")

# Checkbox
with st.expander("‚òëÔ∏è **CHECKBOX**", expanded=False):

    st.checkbox('Option1')
    st.checkbox('Option2')
    st.checkbox('Option3')
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose or action associated with the checkbox.
            \n‚Ä¢ Always left-aligning checkboxes to create a clear visual association with the labels.
            \n‚Ä¢ Avoid using too many checkboxes in a single group to prevent visual clutter and confusion.
            \n‚Ä¢ Group related checkboxes together for better organization if necessary.""")

# Radio Button
with st.expander("‚óâ **RADIO BUTTON**", expanded=False):

    st.radio("Radio button",
             ('Option 1', 'Option 2', 'Option 3'), horizontal=True, help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose of the radio button group to indicate the selection options.
            \n‚Ä¢ Group related options together for better organization.
            \n‚Ä¢ Ensure that only one option can be selected at a time.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Avoid using too many radio buttons in a single group to prevent visual clutter and confusion.
            \n‚Ä¢ Avoid using radio buttons when there are only two options; instead, consider using a checkbox for binary choices.""")

# Number Input
with st.expander("1Ô∏è‚É£ **NUMBER INPUT**", expanded=False):

    st.number_input('Number input', min_value=0, step=1,
                    help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose or expected value for the number input.
            \n‚Ä¢ Set appropriate boundaries (minimum and maximum values) if applicable.
            \n‚Ä¢ Ensure that the number input accepts only valid numeric input.
            \n‚Ä¢ Use consistent step values and formatting (e.g., decimal places, thousand separators) if needed.
            \n‚Ä¢ Use tooltip help to provide additional guide to the user.
            \n‚Ä¢ Provide default or pre-filled values when appropriate.""")

# Slider
with st.expander("üéõÔ∏è **SLIDER**", expanded=False):

    st.slider('Slider', 0, 100, 1,
              help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose or range of the slider.
            \n‚Ä¢ Set appropriate minimum and maximum values for the slider.
            \n‚Ä¢ Use a consistent step or increment value to control the granularity of the slider.
            \n‚Ä¢ If applicable, consider using a range slider (with two draggable handles) for scenarios where a range of values needs to be selected.
            \n‚Ä¢ Provide default or pre-selected values when applicable to assist users in quickly selecting a value.
            \n‚Ä¢ Consider using a logarithmic scale for the slider if the values span a wide range to improve user experience.""")

# Date Input
with st.expander("üìÖ **DATE INPUT**", expanded=False):

    st.date_input(
        "Date input",
        datetime.date(2023, 5, 6),
        help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose or expected format(yyyy/mm/dd) for the date input. 
            \n‚Ä¢ Consider setting appropriate date boundaries (minimum and maximum dates) if the input is limited to a specific range.
            \n‚Ä¢ If relevant, allow users to manually input dates in addition to using the date picker.
            \n‚Ä¢ If the date input is optional, consider providing a default value that makes sense in the context of the application.
            \n‚Ä¢ Validate and provide error messages for incorrect or invalid date formats.""")

# Time Input
with st.expander("‚åö **TIME INPUT**", expanded=False):

    st.time_input('Time input', datetime.time(12, 00),
                  help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly label the purpose of the time input to indicate the expected time format (e.g., 24-hour format or AM/PM). If applicable, provide examples of the expected time format to guide users.
            \n‚Ä¢ Consider setting appropriate time boundaries (minimum and maximum time) if the input is limited to a specific range.
            \n‚Ä¢ If relevant, allow users to manually input times in addition to using the time picker.
            \n‚Ä¢ If the time input is optional, consider providing a default value that makes sense in the context of the application.""")

# File Uploader
with st.expander("üìÇ **FILE UPLOADER**", expanded=False):

    st.file_uploader(
        "File uploader", accept_multiple_files=True,  type='txt, docx, pdf', help="Provide a simple tooltip explanation to help user")
    st.divider()
    st.caption(
        """‚Ä¢ Clearly indicate the accepted file types for the uploader.
            \n‚Ä¢ Limit the accepted file types to only what is necessary for the application to prevent irrelevant or unsupported files from being uploaded.
            \n‚Ä¢ Specify the maximum file size that the uploader can handle.""")

# Button
with st.expander("üì• **BUTTON**", expanded=False):

    st.button("Primary Button", type='primary')
    st.button("Secondary Button", type='secondary')
    st.divider()
    st.caption(
        """‚Ä¢ Use primary button for main action and accompany with secondary button if you need 2 buttons for different actions. Do not use 2 primary buttons alongside one another.
            \n‚Ä¢ Clearly label the purpose of the button to indicate the action it performs. Consider using action-oriented labels like "Submit," "Save," "Apply," or "Search".
            \n‚Ä¢ If the button performs a time-consuming action, provide feedback(st.spinner) to indicate that the action is in progress.
            \n‚Ä¢ Disable the button when the action it triggers is not applicable or during processes that require completion before triggering the action again.
            """)

# Status elements section start
st.divider()
st.markdown("""#### Status Elements""")

# Info Status
with st.expander("‚ÑπÔ∏è **INFO STATUS**", expanded=False):

    st.info('Info Status')
    st.divider()
    st.caption(
        """‚Ä¢ Utilize info messages to explain features, provide instructions, or share tips with users.
            \n‚Ä¢ Keep info messages brief and informative to assist users without overwhelming them.""")


# Error Status
with st.expander("‚ùå **ERROR STATUS**", expanded=False):

    st.error('Error Status')
    st.divider()
    st.caption(
        """‚Ä¢ Use error messages to inform users about critical errors that prevent the application from functioning correctly.
            \n‚Ä¢ Provide clear and concise error messages that help users understand the problem and suggest possible solutions.
            \n‚Ä¢ Avoid using error messages for non-critical issues or situations that users can easily recover from.""")

# Warning Status
with st.expander("‚ö†Ô∏è **WARNING STATUS**", expanded=False):

    st.warning('Warning Status')
    st.divider()
    st.caption(
        """‚Ä¢ Utilize warning messages for situations that require user attention or action.
            \n‚Ä¢ Keep warning messages concise and clear to communicate the message effectively.
            \n‚Ä¢ Use warning messages sparingly to avoid overwhelming users with too many alerts.""")

# Success Status
with st.expander("‚úÖ **SUCCESS STATUS**", expanded=False):

    st.success('Success Status')
    st.divider()
    st.caption(
        """‚Ä¢ Provide positive feedback to users after they successfully complete an action.
            \n‚Ä¢ Keep success messages short and to the point to reinforce the accomplishment.
            \n‚Ä¢ Use success messages to create a positive user experience.""")


# Spinner
with st.expander("üåÄ **SPINNERS**", expanded=False):

    def recursive_spinner():
        st.spinner("Use this for time-consuming action..")
        time.sleep(0.5)
        recursive_spinner()

    with st.spinner():
        recursive_spinner()

    st.divider()
    st.caption(
        """‚Ä¢ Use the spinner for time-consuming action to indicate that the action is in progress.
        \n‚Ä¢ Provide an error if the spinner takes too long to load. Do not let the user wait for too long for the action to take place. Provide a clear time indication if it will take long.
            """)


# ------------ TEMPLATE FOOTER START (EDIT ONLY RELEVANT FIELDS) ------------

# Hide streamlit footer
hide_streamlit_style = """
                <style>
                footer {display: none;}
                .stAlert {white-space:pre-wrap;}
                .st-bk,[role="alert"],input[type]:not([type="number"]),
                [data-baseweb="input"]:not(:has([type="number"])),
                [data-baseweb="textarea"],button[kind],
                [data-testid="stForm"], .focused.focused {
                    border-radius: 8px;
                }
                [data-baseweb="input"]:has([type="number"]) {
                    border-top-left-radius: 8px;
                    border-bottom-left-radius: 8px;
                }
                button.step-up.step-up {
                    border-top-right-radius: 8px;
                    border-bottom-right-radius: 8px;
                }
                [role="tab"] {
                    border-radius: 8px;
                    padding: 0 16px;
                    height: 30px;
                    margin-bottom: 4px;
                }

                [role="tab"].st-da,[role="tab"]:focus { background-color: #f1f2ff;  }
                .st-d2 { gap: 0.5rem }
                </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# ------------ TEMPLATE FOOTER END (EDIT ONLY RELEVANT FIELDS) ------------
